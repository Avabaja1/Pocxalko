local HitboxExpanderTorso = {
Size = 1,
Enabled = false,
Transparency = 0.5,  
Color = Color3.fromRGB(84, 101, 255)
}

local HitboxExpanderHead = {
Size = 1,
Enabled = false,
Transparency = 0.5,  
Color = Color3.fromRGB(84, 101, 255)
}

local OriginalSizes = {}
local hitboxConnections = {}

local function expandHitbox(model, partName, size, transparency)
local part = model:FindFirstChild(partName)
if part then
if not OriginalSizes[model] then
OriginalSizes[model] = {}
end

if not OriginalSizes[model][part.Name] then
OriginalSizes[model][part.Name] = part.Size
end

part.Size = Vector3.new(size, size, size)
part.Transparency = transparency
part.CanCollide = false


part.Color = HitboxExpanderTorso.Color
end
end

local function resetHitbox(model, partName)
local part = model:FindFirstChild(partName)
if part and OriginalSizes[model] and OriginalSizes[model][part.Name] then
part.Size = OriginalSizes[model][part.Name]
part.Transparency = 0
part.CanCollide = true

end
end

local function updateHitboxes()
for _, model in pairs(game:GetService("Workspace"):GetChildren()) do
if model:IsA("Model") and model:FindFirstChild("Torso") then
resetHitbox(model, "Torso")

if HitboxExpanderTorso.Enabled then
expandHitbox(model, "Torso", HitboxExpanderTorso.Size, HitboxExpanderTorso.Transparency)
end
end
if model:IsA("Model") and model:FindFirstChild("Head") then
resetHitbox(model, "Head")

if HitboxExpanderHead.Enabled then
expandHitbox(model, "Head", HitboxExpanderHead.Size, HitboxExpanderHead.Transparency)
end
end
end
end

local function enableHitboxExpansion()
updateHitboxes()
table.insert(hitboxConnections, game:GetService("RunService").RenderStepped:Connect(updateHitboxes))
end

local function disableHitboxExpansion()
for  model in pairs(game:GetService("Workspace"):GetChildren()) do
if model:IsA("Model") and model:FindFirstChild("Torso") then
resetHitbox(model, "Torso")
end
if model:IsA("Model") and model:FindFirstChild("Head") then
resetHitbox(model, "Head")
end
end

for  connection in pairs(hitboxConnections) do
if connection then
connection:Disconnect()
end
end
hitboxConnections = {}
end


local toggle = sector1.element('Toggle', 'Enable', false, function(v)
HitboxExpanderTorso.Enabled = v.Toggle
if v.Toggle then
enableHitboxExpansion()
else
disableHitboxExpansion()
end
end)


toggle:add_color({Color = Color3.fromRGB(84, 101, 255)}, nil, function(v)
HitboxExpanderTorso.Color = v.Color
print("Torso Color: ", v.Color)
if HitboxExpanderTorso.Enabled then
updateHitboxes()
end
end)


sector1.element('Slider', 'Size', {default = {min = 1, max = 7, default = 1}}, function(v)
HitboxExpanderTorso.Size = v.Slider
if HitboxExpanderTorso.Enabled then
updateHitboxes()
end
end)


if HitboxExpanderTorso.Enabled then
enableHitboxExpansion()
end

local section2 = tab1.new_section('Rage')

local sector2 = section2.new_sector('Head Hitbox', 'Left')


local toggle = sector2.element('Toggle', 'Enable', false, function(v)
HitboxExpanderHead.Enabled = v.Toggle
if v.Toggle then
enableHitboxExpansion()
else
disableHitboxExpansion()
end
end)


toggle:add_color({Color = Color3.fromRGB(84, 101, 255)}, nil, function(v)
HitboxExpanderHead.Color = v.Color
if HitboxExpanderHead.Enabled then
updateHitboxes()
end
end)


sector2.element('Slider', 'Size', {default = {min = 1, max = 7, default = 1}}, function(v)
HitboxExpanderHead.Size = v.Slider
if HitboxExpanderHead.Enabled then
updateHitboxes()
end
end)


if HitboxExpanderHead.Enabled then
enableHitboxExpansion()
end
